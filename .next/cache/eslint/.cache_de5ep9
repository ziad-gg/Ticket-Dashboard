[{"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\embeds\\page.tsx":"1","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\layout.tsx":"2","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\manage\\page.tsx":"3","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\page.tsx":"4","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\settings\\page.tsx":"5","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\layout.tsx":"6","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\page.tsx":"7","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\base\\particles.tsx":"8","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Card.tsx":"9","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\chart.tsx":"10","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Check.tsx":"11","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\EmbedCard.tsx":"12","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Header.tsx":"13","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\SideBar.tsx":"14","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\EmbedModal.tsx":"15","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\PreviewComponent.tsx":"16","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\base\\loading.tsx":"17","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\loading.tsx":"18","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\panalCard.tsx":"19","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\panalModal.tsx":"20"},{"size":2586,"mtime":1692870211781,"results":"21","hashOfConfig":"22"},{"size":1648,"mtime":1692885049456,"results":"23","hashOfConfig":"22"},{"size":4885,"mtime":1692870248476,"results":"24","hashOfConfig":"22"},{"size":2486,"mtime":1692774605563,"results":"25","hashOfConfig":"22"},{"size":911,"mtime":1692870315936,"results":"26","hashOfConfig":"22"},{"size":472,"mtime":1692638493669,"results":"27","hashOfConfig":"22"},{"size":1696,"mtime":1692896153339,"results":"28","hashOfConfig":"22"},{"size":7774,"mtime":1692870957089,"results":"29","hashOfConfig":"22"},{"size":509,"mtime":1692615029381,"results":"30","hashOfConfig":"22"},{"size":1193,"mtime":1692772804205,"results":"31","hashOfConfig":"22"},{"size":594,"mtime":1692621318695,"results":"32","hashOfConfig":"22"},{"size":5716,"mtime":1692870545371,"results":"33","hashOfConfig":"22"},{"size":2485,"mtime":1692649414191,"results":"34","hashOfConfig":"22"},{"size":2681,"mtime":1692652222777,"results":"35","hashOfConfig":"22"},{"size":18810,"mtime":1692870616637,"results":"36","hashOfConfig":"22"},{"size":1046,"mtime":1692626853853,"results":"37","hashOfConfig":"22"},{"size":375,"mtime":1692774368544,"results":"38","hashOfConfig":"22"},{"size":95,"mtime":1692774531916,"results":"39","hashOfConfig":"22"},{"size":4251,"mtime":1692870088502,"results":"40","hashOfConfig":"22"},{"size":17501,"mtime":1692870644957,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pubpcl",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\embeds\\page.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\layout.tsx",["107"],[],"\"use client\";\r\nimport { useState, useEffect, Suspense } from \"react\"\r\nimport config from \"@/config/config.mjs\";\r\nimport type { Metadata } from 'next'\r\nimport { usePathname } from 'next/navigation'\r\nimport type { DashboardContext, OptionalDashboardContext } from '@/types/types'\r\nimport SideBar from '@/components/SideBar'\r\nimport InfoContext from '@/context/useInfo'\r\nimport Header from '@/components/Header';\r\nimport Loading from \"@/components/base/loading\";\r\n\r\nconst getData = async (): Promise<DashboardContext> => {\r\n  const request = await fetch(config.api(\"metadata\"), {\r\n    cache: 'reload',\r\n    next: {\r\n      revalidate: 5\r\n    }\r\n  });\r\n  const data = await request.json();\r\n\r\n  return data;\r\n};\r\n\r\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\r\n  const [metadata, setMetadata] = useState<OptionalDashboardContext | DashboardContext>({})\r\n  const [isLoading, setLoading] = useState<boolean>(true)\r\n  const Route = usePathname();\r\n\r\n  useEffect(() => {\r\n      getData().then((data) => {\r\n        data.page = Route;\r\n        setMetadata(data);\r\n        setLoading(false);\r\n        console.log(data)\r\n      });\r\n  }, [])\r\n\r\n  if (isLoading) return <Loading />\r\n\r\n  return (\r\n    <InfoContext.Provider value={metadata}>\r\n      <div className='flex h-screen w-screen'>\r\n        <SideBar />\r\n        <div className='flex flex-col w-[calc(100%-5rem)] '>\r\n          <Header />\r\n          <div className='h-[calc(100%-5rem)] '>\r\n            <Suspense fallback={<Loading />}>\r\n              {children}\r\n            </Suspense>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </InfoContext.Provider>\r\n  )\r\n}","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\manage\\page.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\page.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\dashboard\\settings\\page.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\layout.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\app\\page.tsx",["108"],[],"\"use client\";\r\nimport Particles from \"@/components/base/particles\";\r\nimport config from \"@/config/config.mjs\";\r\nimport { OmitDashboardContext } from \"@/types/global\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\n\r\nasync function getData(): Promise<OmitDashboardContext> {\r\n    const res = await fetch(config.api('metadata'), {\r\n        cache: 'no-store',\r\n        next: {\r\n            revalidate: 5\r\n        }\r\n    });\r\n\r\n    const data = await res.json()\r\n    return data\r\n};\r\n\r\nexport default async function Home() {\r\n    const data = await getData();\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center h-screen justify-center w-screen before overflow-hidden bg-black relative\">\r\n            <Particles\r\n                className=\"absolute inset-0 animate-fade-in bg-gray-900\"\r\n                quantity={120}\r\n            />\r\n            <div className=\"h-[35rem] w-[30rem] bg-gray-800 shadow-2xl bg-opacity-50 z-50 rounded-lg\">\r\n                <div className=\"w-full h-[10rem] flex justify-center items-center pt-10 flex-col gap-y-4\">\r\n                    <Image alt=\"Bot\" height={1} width={1} quality={100} unoptimized={true} priority src={data.serverImage as string} className=\"rounded-full w-[7rem] h-[7rem]\" />\r\n                    <h2 className=\"text-white font-bold text-xl \">{data.username}</h2>\r\n                </div>\r\n                <div className=\"w-full h-[25rem] flex flex-col justify-center items-center\">\r\n                    <Link href=\"/dashboard\" className=\"bg-gray-700 w-[70%] h-[15%] flex justify-center items-center font-bold text-white text-2xl\">Dashboard</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\base\\particles.tsx",["109","110","111"],[],"\"use client\";\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport { useMousePosition } from \"@/util/mouse\";\r\n\r\ninterface ParticlesProps {\r\n    className?: string;\r\n    quantity?: number;\r\n    staticity?: number;\r\n    ease?: number;\r\n    refresh?: boolean;\r\n}\r\n\r\nexport default function Particles({\r\n    className = \"\",\r\n    quantity = 30,\r\n    staticity = 50,\r\n    ease = 50,\r\n    refresh = false,\r\n}: ParticlesProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const canvasContainerRef = useRef<HTMLDivElement>(null);\r\n    const context = useRef<CanvasRenderingContext2D | null>(null);\r\n    const circles = useRef<any[]>([]);\r\n    const mousePosition = useMousePosition();\r\n    const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\r\n    const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });\r\n    const dpr = typeof window !== \"undefined\" ? window.devicePixelRatio : 1;\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            context.current = canvasRef.current.getContext(\"2d\");\r\n        }\r\n        initCanvas();\r\n        animate();\r\n        window.addEventListener(\"resize\", initCanvas);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", initCanvas);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        onMouseMove();\r\n    }, [mousePosition.x, mousePosition.y]);\r\n\r\n    useEffect(() => {\r\n        initCanvas();\r\n    }, [refresh]);\r\n\r\n    const initCanvas = () => {\r\n        resizeCanvas();\r\n        drawParticles();\r\n    };\r\n\r\n    const onMouseMove = () => {\r\n        if (canvasRef.current) {\r\n            const rect = canvasRef.current.getBoundingClientRect();\r\n            const { w, h } = canvasSize.current;\r\n            const x = mousePosition.x - rect.left - w / 2;\r\n            const y = mousePosition.y - rect.top - h / 2;\r\n            const inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2;\r\n            if (inside) {\r\n                mouse.current.x = x;\r\n                mouse.current.y = y;\r\n            }\r\n        }\r\n    };\r\n\r\n    type Circle = {\r\n        x: number;\r\n        y: number;\r\n        translateX: number;\r\n        translateY: number;\r\n        size: number;\r\n        alpha: number;\r\n        targetAlpha: number;\r\n        dx: number;\r\n        dy: number;\r\n        magnetism: number;\r\n    };\r\n\r\n    const resizeCanvas = () => {\r\n        if (canvasContainerRef.current && canvasRef.current && context.current) {\r\n            circles.current.length = 0;\r\n            canvasSize.current.w = canvasContainerRef.current.offsetWidth;\r\n            canvasSize.current.h = canvasContainerRef.current.offsetHeight;\r\n            canvasRef.current.width = canvasSize.current.w * dpr;\r\n            canvasRef.current.height = canvasSize.current.h * dpr;\r\n            canvasRef.current.style.width = `${canvasSize.current.w}px`;\r\n            canvasRef.current.style.height = `${canvasSize.current.h}px`;\r\n            context.current.scale(dpr, dpr);\r\n        }\r\n    };\r\n\r\n    const circleParams = (): Circle => {\r\n        const x = Math.floor(Math.random() * canvasSize.current.w);\r\n        const y = Math.floor(Math.random() * canvasSize.current.h);\r\n        const translateX = 0;\r\n        const translateY = 0;\r\n        const size = Math.floor(Math.random() * 2) + 0.1;\r\n        const alpha = 0;\r\n        const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));\r\n        const dx = (Math.random() - 0.5) * 0.2;\r\n        const dy = (Math.random() - 0.5) * 0.2;\r\n        const magnetism = 0.1 + Math.random() * 4;\r\n        return {\r\n            x,\r\n            y,\r\n            translateX,\r\n            translateY,\r\n            size,\r\n            alpha,\r\n            targetAlpha,\r\n            dx,\r\n            dy,\r\n            magnetism,\r\n        };\r\n    };\r\n\r\n    const drawCircle = (circle: Circle, update = false) => {\r\n        if (context.current) {\r\n            const { x, y, translateX, translateY, size, alpha } = circle;\r\n            context.current.translate(translateX, translateY);\r\n            context.current.beginPath();\r\n            context.current.arc(x, y, size, 0, 2 * Math.PI);\r\n            context.current.fillStyle = `rgba(255, 255, 255, ${alpha})`;\r\n            context.current.fill();\r\n            context.current.setTransform(dpr, 0, 0, dpr, 0, 0);\r\n\r\n            if (!update) {\r\n                circles.current.push(circle);\r\n            }\r\n        }\r\n    };\r\n\r\n    const clearContext = () => {\r\n        if (context.current) {\r\n            context.current.clearRect(\r\n                0,\r\n                0,\r\n                canvasSize.current.w,\r\n                canvasSize.current.h,\r\n            );\r\n        }\r\n    };\r\n\r\n    const drawParticles = () => {\r\n        clearContext();\r\n        const particleCount = quantity;\r\n        for (let i = 0; i < particleCount; i++) {\r\n            const circle = circleParams();\r\n            drawCircle(circle);\r\n        }\r\n    };\r\n\r\n    const remapValue = (\r\n        value: number,\r\n        start1: number,\r\n        end1: number,\r\n        start2: number,\r\n        end2: number,\r\n    ): number => {\r\n        const remapped =\r\n            ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;\r\n        return remapped > 0 ? remapped : 0;\r\n    };\r\n\r\n    const animate = () => {\r\n        clearContext();\r\n        circles.current.forEach((circle: Circle, i: number) => {\r\n            const edge = [\r\n                circle.x + circle.translateX - circle.size, // distance from left edge\r\n                canvasSize.current.w - circle.x - circle.translateX - circle.size, // distance from right edge\r\n                circle.y + circle.translateY - circle.size, // distance from top edge\r\n                canvasSize.current.h - circle.y - circle.translateY - circle.size, // distance from bottom edge\r\n            ];\r\n            const closestEdge = edge.reduce((a, b) => Math.min(a, b));\r\n            const remapClosestEdge = parseFloat(\r\n                remapValue(closestEdge, 0, 20, 0, 1).toFixed(2),\r\n            );\r\n            if (remapClosestEdge > 1) {\r\n                circle.alpha += 0.02;\r\n                if (circle.alpha > circle.targetAlpha) {\r\n                    circle.alpha = circle.targetAlpha;\r\n                }\r\n            } else {\r\n                circle.alpha = circle.targetAlpha * remapClosestEdge;\r\n            }\r\n            circle.x += circle.dx;\r\n            circle.y += circle.dy;\r\n            circle.translateX +=\r\n                (mouse.current.x / (staticity / circle.magnetism) - circle.translateX) /\r\n                ease;\r\n            circle.translateY +=\r\n                (mouse.current.y / (staticity / circle.magnetism) - circle.translateY) /\r\n                ease;\r\n            if (\r\n                circle.x < -circle.size ||\r\n                circle.x > canvasSize.current.w + circle.size ||\r\n                circle.y < -circle.size ||\r\n                circle.y > canvasSize.current.h + circle.size\r\n            ) {\r\n                circles.current.splice(i, 1);\r\n                const newCircle = circleParams();\r\n                drawCircle(newCircle);\r\n            } else {\r\n                drawCircle(\r\n                    {\r\n                        ...circle,\r\n                        x: circle.x,\r\n                        y: circle.y,\r\n                        translateX: circle.translateX,\r\n                        translateY: circle.translateY,\r\n                        alpha: circle.alpha,\r\n                    },\r\n                    true,\r\n                );\r\n            }\r\n        });\r\n        window.requestAnimationFrame(animate);\r\n    };\r\n\r\n    return (\r\n        <div className={className} ref={canvasContainerRef} aria-hidden=\"true\">\r\n            <canvas ref={canvasRef} />\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Card.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\chart.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Check.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\EmbedCard.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\Header.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\SideBar.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\EmbedModal.tsx",["112"],[],"import Image from \"next/image\";\r\nimport React, { Dispatch, SetStateAction, useState, useEffect } from \"react\"\r\nimport config from \"@/config/config.mjs\"\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Modal from \"@mui/material/Modal\"\r\nimport Backdrop from \"@mui/material/Backdrop\"\r\nimport Fade from \"@mui/material/Fade\"\r\nimport TextField from \"@mui/material/TextField\"\r\nimport Button from \"@mui/material/Button\"\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\"\r\nimport Radio from \"@mui/material/Radio\"\r\nimport RadioGroup from \"@mui/material/RadioGroup\"\r\nimport FormControl from \"@mui/material/FormControl\"\r\nimport FormLabel from \"@mui/material/FormLabel\"\r\nimport CheckIcon from \"@mui/icons-material/Check\"\r\nimport CloseIcon from \"@mui/icons-material/Close\"\r\nimport BackArrowIcon from \"@mui/icons-material/ArrowBack\"\r\nimport Slide, { SlideProps } from \"@mui/material/Slide\"\r\nimport Buttons from \"@/public/Buttons.png\"\r\nimport { createTheme, ThemeProvider, Snackbar, MenuItem, Select, InputLabel } from \"@mui/material\"\r\n\r\n// Define interface for props\r\ninterface Props {\r\n    open: Boolean | boolean\r\n    setOpen: Dispatch<SetStateAction<Boolean>> | Dispatch<SetStateAction<boolean>>\r\n    setEmbed: Dispatch<SetStateAction<{ id: string; name: string }[]>> | Dispatch<SetStateAction<{ id: string; name: string }[]>>\r\n    data?: {\r\n        id: string\r\n        name: string\r\n        embedColor: string\r\n        title: string\r\n        description: string\r\n        footer: string\r\n        imageUrl: string\r\n        buttonStyle: string\r\n        buttonText: string\r\n        buttonEmoji: string\r\n    }\r\n}\r\n\r\nexport default function EmbedModal(props: Props) {\r\n    const { open, setOpen } = props;\r\n    const [useGuildThumbnail, setUseGuildThumbnail] = useState(false)\r\n    const [useGuildIconInFooter, setUseGuildIconInFooter] = useState(false)\r\n    const [showSnackbar, setShowSnackbar] = useState(false)\r\n    const [submitDisabled, setSubmitDisabled] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n    const [id, setId] = useState<string>(uuidv4());\r\n    const [embedColor, setEmbedColor] = useState(\"Blue\")\r\n    const [embedName, setEmbedName] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [footer, setFooter] = useState(\"\")\r\n    const [imageUrl, setImageUrl] = useState(\"https://example.com/default-image.jpg\")\r\n    const [buttonStyle, setButtonStyle] = useState(\"primary\")\r\n    const [buttonText, setButtonText] = useState(\"Click Me\")\r\n    const [buttonEmoji, setButtonEmoji] = useState(\"🚀\")\r\n    const [showButtonModal, setShowButtonModal] = useState(false)\r\n\r\n    if (props.data) {\r\n        setId(props.data.id)\r\n        setEmbedName(props.data.name)\r\n        setEmbedColor(props.data.embedColor)\r\n        setTitle(props.data.title)\r\n        setDescription(props.data.description)\r\n        setFooter(props.data.footer)\r\n        setImageUrl(props.data.imageUrl)\r\n        setButtonStyle(props.data.buttonStyle)\r\n        setButtonText(props.data.buttonText)\r\n        setButtonEmoji(props.data.buttonEmoji)\r\n    }\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n        setSubmitDisabled(false)\r\n        setErrorMessage(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (open) handleOpen()\r\n    }, [open])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setShowSnackbar(false)\r\n        setErrorMessage(\"\")\r\n        setShowButtonModal(false)\r\n    }\r\n\r\n    const handleUseGuildThumbnailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUseGuildThumbnail(event.target.value === \"true\")\r\n    }\r\n\r\n    const handleUseGuildIconInFooterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUseGuildIconInFooter(event.target.value === \"true\")\r\n    }\r\n\r\n    const handleNext = () => {\r\n        const { error, message } = validateInputs()\r\n        if (error) {\r\n            setErrorMessage(message)\r\n        } else {\r\n            setErrorMessage(\"\")\r\n            setShowButtonModal(true)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault()\r\n        setId(uuidv4())\r\n\r\n        const dataToSend = {\r\n            id,\r\n            name: embedName,\r\n            title,\r\n            description,\r\n            footer,\r\n            imageUrl,\r\n            buttonStyle,\r\n            buttonText,\r\n            buttonEmoji,\r\n            useGuildThumbnail,\r\n            useGuildIconInFooter,\r\n            embedColor,\r\n        };\r\n\r\n\r\n        fetch(config.api(`embeds/new`), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Cache-Control': 'no-store', // Disable caching\r\n            },\r\n            cache: 'no-store',\r\n            next: {\r\n                revalidate: 0,\r\n            },\r\n            body: JSON.stringify(dataToSend)\r\n        }).then(response => response.json()).then(data => {\r\n\r\n            if (data?.error) {\r\n                setShowButtonModal(false)\r\n                setErrorMessage(data.message)\r\n            } else {\r\n                setShowSnackbar(true);\r\n                setSubmitDisabled(true);\r\n                setErrorMessage(\"\");\r\n\r\n                setTimeout(() => {\r\n                    props.setEmbed(prev => {\r\n                        prev.push({ name: embedName, id });\r\n                        return prev\r\n                    });\r\n                }, 2000);\r\n            }\r\n\r\n        }).catch((e) => {\r\n            console.log(e)\r\n            setShowButtonModal(false)\r\n            setErrorMessage(\"error\")\r\n        })\r\n\r\n    }\r\n\r\n    const validateInputs = () => {\r\n\r\n        if (!embedName) {\r\n            return { error: true, message: 'Embed name is require' }\r\n        }\r\n\r\n        if (embedName.includes(' ')) {\r\n            return { error: true, message: 'Embed name cant include spaces' }\r\n        }\r\n\r\n        if (title && (title.length < 1 || title.length > 200)) {\r\n            return { error: true, message: 'Embed title must be between 5 and 200 max' }\r\n        }\r\n\r\n        if (description && (description.length < 5 || description.length > 400)) {\r\n            return { error: true, message: 'Embed description must be between 5 and 400 max' }\r\n        }\r\n\r\n        return { error: false, message: 'Invalid input. Please check your inputs' }\r\n    }\r\n\r\n    const customTheme = createTheme({\r\n        palette: {\r\n            primary: {\r\n                main: \"#2196f3\",\r\n            },\r\n            secondary: {\r\n                main: \"#f50057\",\r\n            },\r\n        },\r\n    })\r\n\r\n    return (\r\n        <ThemeProvider theme={customTheme}>\r\n            <div>\r\n                <Modal\r\n                    open={open as boolean}\r\n                    onClose={handleClose}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={open as boolean}>\r\n                        <div className=\"fixed inset-0 flex justify-center items-center backdrop-blur-md bg-opacity-25\">\r\n                            <form className=\"flex justify-center items-center\">\r\n                                <div className=\"bg-white p-8 shadow-lg opacity-100 w-[80%] h-[85%] rounded-xl\">\r\n                                    <div className=\"flex justify-between items-center mb-4\">\r\n                                        <h2 className=\"text-2xl font-semibold\">Create Embed</h2>\r\n                                        <Button onClick={handleClose} startIcon={<CloseIcon />}>Close</Button>\r\n                                    </div>\r\n                                    {errorMessage && <p className=\"text-red-500 mb-3\">{errorMessage}</p>}\r\n                                    <TextField\r\n                                        label=\"Name\"\r\n                                        value={embedName}\r\n                                        onChange={(e) => setEmbedName(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Embed Color\"\r\n                                        value={embedColor}\r\n                                        onChange={(e) => setEmbedColor(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                        disabled\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Title\"\r\n                                        value={title}\r\n                                        onChange={(e) => setTitle(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Description\"\r\n                                        value={description}\r\n                                        onChange={(e) => setDescription(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Footer\"\r\n                                        value={footer}\r\n                                        onChange={(e) => setFooter(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                    />\r\n                                    <TextField\r\n                                        label=\"Image URL\"\r\n                                        value={imageUrl}\r\n                                        onChange={(e) => setImageUrl(e.target.value)}\r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        className=\"mb-4\"\r\n                                        style={{ marginBottom: 16 }}\r\n                                    />\r\n\r\n                                    <FormControl component=\"fieldset\" className=\"mb-4 me-3\" style={{ marginRight: 12 }}>\r\n                                        <FormLabel component=\"legend\">Use Guild Thumbnail in Embed</FormLabel>\r\n                                        <RadioGroup\r\n                                            aria-label=\"Use Guild Thumbnail\"\r\n                                            name=\"useGuildThumbnail\"\r\n                                            value={useGuildThumbnail.toString()}\r\n                                            onChange={handleUseGuildThumbnailChange}\r\n                                        >\r\n                                            <FormControlLabel value=\"true\" control={<Radio />} label=\"Yes\" />\r\n                                            <FormControlLabel value=\"false\" control={<Radio />} label=\"No\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n\r\n                                    <FormControl component=\"fieldset\" className=\"mb-4\">\r\n                                        <FormLabel component=\"legend\">Use Guild Icon in Footer</FormLabel>\r\n                                        <RadioGroup\r\n                                            aria-label=\"Use Guild Icon in Footer\"\r\n                                            name=\"useGuildIconInFooter\"\r\n                                            value={useGuildIconInFooter.toString()}\r\n                                            onChange={handleUseGuildIconInFooterChange}\r\n                                        >\r\n                                            <FormControlLabel value=\"true\" control={<Radio />} label=\"Yes\" />\r\n                                            <FormControlLabel value=\"false\" control={<Radio />} label=\"No\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n\r\n                                    <div className=\"mt-4\">\r\n                                        <Button\r\n                                            type=\"button\"\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            startIcon={<CheckIcon />}\r\n                                            className=\"bg-blue-900\"\r\n                                            disabled={submitDisabled}\r\n                                            onClick={handleNext}\r\n                                        >\r\n                                            Next\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n                <Modal\r\n                    open={showButtonModal}\r\n                    onClose={handleClose}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500,\r\n                    }}\r\n                >\r\n                    <Slide in={showButtonModal} direction=\"up\" timeout={{ enter: 300, exit: 300 }}>\r\n                        <div className=\"fixed inset-0 flex justify-center items-center backdrop-blur-md bg-opacity-25\">\r\n                            <div className=\"bg-white p-8 shadow-lg opacity-100 w-[80%] h-[85%] rounded-xl\">\r\n                                <div className=\"flex justify-between items-center mb-4\">\r\n                                    <h2 className=\"text-2xl font-semibold\">Button</h2>\r\n                                    <Button onClick={handleClose} startIcon={<CloseIcon />}>Close</Button>\r\n                                </div>\r\n                                <InputLabel htmlFor=\"button-style-select\">Button Style</InputLabel>\r\n                                <Select\r\n                                    labelId=\"button-style-select\"\r\n                                    id=\"button-style\"\r\n                                    value={buttonStyle}\r\n                                    onChange={(e) => setButtonStyle(e.target.value)}\r\n                                    fullWidth\r\n                                    className=\"mb-4\"\r\n                                >\r\n                                    <MenuItem value=\"primary\">Primary</MenuItem>\r\n                                    <MenuItem value=\"secondary\">Secondary</MenuItem>\r\n                                    <MenuItem value=\"Danger\">Danger</MenuItem>\r\n                                    <MenuItem value=\"Success\">Success</MenuItem>\r\n                                </Select>\r\n                                <TextField\r\n                                    label=\"Button Text\"\r\n                                    value={buttonText}\r\n                                    onChange={(e) => setButtonText(e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    className=\"mb-4\"\r\n                                    style={{ marginBottom: 15 }}\r\n                                />\r\n                                <TextField\r\n                                    label=\"Button Emoji\"\r\n                                    value={buttonEmoji}\r\n                                    onChange={(e) => setButtonEmoji(e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    className=\"mb-4\"\r\n                                />\r\n                                <Image src={Buttons}  alt=\"Buttons\" className=\"w-full h-36 mt-4\" />\r\n                                <div className=\"mt-4\">\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        startIcon={<CheckIcon />}\r\n                                        className=\"bg-blue-900\"\r\n                                        disabled={submitDisabled}\r\n                                        onClick={handleSubmit}\r\n                                        style={{ marginRight: 16 }}\r\n\r\n                                    >\r\n                                        Submit\r\n                                    </Button>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        className=\"ms-3 bg-red-600\"\r\n                                        disabled={submitDisabled}\r\n                                        startIcon={<BackArrowIcon />}\r\n                                        onClick={() => setShowButtonModal(false)}\r\n                                    >\r\n                                        Back\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Slide>\r\n                </Modal>\r\n                <Snackbar\r\n                    open={showSnackbar}\r\n                    autoHideDuration={3000}\r\n                    onClose={handleClose}\r\n                    message=\"Form submitted successfully\"\r\n                />\r\n            </div>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\PreviewComponent.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\base\\loading.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\loading.tsx",[],[],"C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\panalCard.tsx",["113"],[],"\"use client\";\r\nimport React, { CSSProperties, lazy, MouseEvent, useEffect, useState } from 'react';\r\nimport PanelModal from '@/components/ticket/panalModal';\r\nimport config from \"@/config/config.mjs\"\r\nconst Typography = lazy(() => import('@mui/joy/Typography'));\r\nconst Button = lazy(() => import('@mui/joy/Button'));\r\nconst Modal = lazy(() => import('@mui/material/Modal'));\r\n\r\nconst modalStyle = {\r\n    display: \"flex\",\r\n    color: 'white',\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    position: \"absolute\",\r\n    top: \"0\",\r\n    bottom: \"0\",\r\n    left: \"0\",\r\n    right: \"0\",\r\n    background: \"rgba(0, 0, 0, 0.5)\",\r\n};\r\n\r\ninterface IProps {\r\n    id: String;\r\n    name?: String;\r\n    data: data;\r\n    refresh: () => void\r\n};\r\n\r\nexport default function PanalCard(Props: IProps) {\r\n\r\n    const [EditModal, setEditModal] = useState(false)\r\n    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n    const [Disabled, setDisabled] = useState(Props.data.disabled);\r\n\r\n    const handleDeleteClick = () => {\r\n        setShowDeleteConfirmation(true);\r\n    };\r\n\r\n    const confirmDelete = () => {\r\n        const embedCardElement = document.getElementById(Props.id as string);\r\n        if (embedCardElement) {\r\n            fetch(config.api(`panals/${Props.id}`), {\r\n                cache: 'no-store',\r\n                method: 'delete'\r\n            })\r\n            setShowDeleteConfirmation(false);\r\n            embedCardElement.remove();\r\n        }\r\n    };\r\n\r\n    const cancelDelete = () => {\r\n        setShowDeleteConfirmation(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetch(config.api(`panals/get/${Props.id}`), {\r\n        }).then(res => res.json()).then((data) => {\r\n            setDisabled(data.disabled)\r\n        })\r\n    }, [Disabled])\r\n\r\n    const handelDisabledEnabled = () => {\r\n\r\n        if (Disabled) {\r\n            fetch(config.api(`panals/enable/${Props.id}`), {\r\n                method: 'POST',\r\n            }).then(() => {\r\n                setDisabled(false)\r\n            })\r\n        } else {\r\n            fetch(config.api(`panals/disable/${Props.id}`), { // Change the endpoint to disable\r\n                method: 'POST',\r\n            }).then(() => {\r\n                setDisabled(true)\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div id={Props.id as string} className=\"w-full h-20 bg-main flex items-center rounded-lg group justify-between\">\r\n            <div className=\"flex justify-center items-center p-5\">\r\n                <span className='w-[269px]'><span className=\" opacity-50 text-lg font-bold \">{Props.name}</span></span>\r\n                <Typography color=\"warning\" sx={{ 'marginLeft': 16 }} className=\"ms-3 un\">Hover to view more</Typography>\r\n            </div>\r\n            <div className='me-3'>\r\n                <Button sx={{ marginRight: 3 }} color=\"primary\" className='w-16' onClick={() => setEditModal(true)}>Edit</Button>\r\n                <Button sx={{ marginRight: 3 }} color=\"danger\" onClick={handleDeleteClick} >delete</Button>\r\n                <Button id=\"statusButton\" color={!Disabled ? \"success\" : \"warning\"} onClick={handelDisabledEnabled}>{Disabled ? \"Enable\" : \"Disable\"}</Button>\r\n            </div>\r\n\r\n            {EditModal && <PanelModal open={EditModal} setOpen={setEditModal} data={Props.data} refresh={Props.refresh} />}\r\n\r\n            <Modal open={showDeleteConfirmation} onClose={cancelDelete}>\r\n                <div className=\"delete-modal\" style={modalStyle as CSSProperties}>\r\n                    <div className=\"modal-content\">\r\n                        <Typography className=\"pb-5  font-bold text-3xl\" color=\"danger\">Confirm Deletion</Typography>\r\n                        <Typography className=\"pb-5  font-bold text-lg\">Are you sure you want to delete?</Typography>\r\n                        <Button variant=\"outlined\" color=\"danger\" onClick={confirmDelete} className=\"me-5\" style={{ marginRight: 20 }}>\r\n                            Confirm\r\n                        </Button>\r\n                        <Button variant=\"outlined\" onClick={cancelDelete} className=\"ms-5\">\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","C:\\Users\\zemad\\OneDrive\\Desktop\\ticket-dashboard\\components\\ticket\\panalModal.tsx",[],[],{"ruleId":"114","severity":1,"message":"115","line":36,"column":6,"nodeType":"116","endLine":36,"endColumn":8,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":20,"column":1,"nodeType":"120","endLine":40,"endColumn":2},{"ruleId":"114","severity":1,"message":"121","line":40,"column":8,"nodeType":"116","endLine":40,"endColumn":10,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":44,"column":8,"nodeType":"116","endLine":44,"endColumn":42,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"125","line":48,"column":8,"nodeType":"116","endLine":48,"endColumn":17,"suggestions":"126"},{"ruleId":"114","severity":1,"message":"127","line":82,"column":8,"nodeType":"116","endLine":82,"endColumn":14,"suggestions":"128"},{"ruleId":"114","severity":1,"message":"129","line":60,"column":8,"nodeType":"116","endLine":60,"endColumn":18,"suggestions":"130"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Route'. Either include it or remove the dependency array.","ArrayExpression",["131"],"@next/next/no-async-client-component","Prevent client components from being async functions. See: https://nextjs.org/docs/messages/no-async-client-component","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'animate' and 'initCanvas'. Either include them or remove the dependency array.",["132"],"React Hook useEffect has a missing dependency: 'onMouseMove'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'initCanvas'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has a missing dependency: 'handleOpen'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'Props.id'. Either include it or remove the dependency array.",["136"],{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [Route]",{"range":"149","text":"150"},"Update the dependencies array to be: [animate, initCanvas]",{"range":"151","text":"152"},"Update the dependencies array to be: [mousePosition.x, mousePosition.y, onMouseMove]",{"range":"153","text":"154"},"Update the dependencies array to be: [initCanvas, refresh]",{"range":"155","text":"156"},"Update the dependencies array to be: [handleOpen, open]",{"range":"157","text":"158"},"Update the dependencies array to be: [Disabled, Props.id]",{"range":"159","text":"160"},[1161,1163],"[Route]",[1276,1278],"[animate, initCanvas]",[1338,1372],"[mousePosition.x, mousePosition.y, onMouseMove]",[1431,1440],"[initCanvas, refresh]",[3323,3329],"[handleOpen, open]",[1770,1780],"[Disabled, Props.id]"]